{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = [];\nconst userSlice = createSlice({\n  name: 'users',\n  initialState,\n  reducers: {\n    addUser: (state, action) => {\n      state.push(action.payload);\n    },\n    editUser: (state, action) => {\n      const date = new Date();\n      const editDate = date.getFullYear() + \"년 \" + (date.getMonth() + 1) + \"월\" + date.getDate() + \"일 \" + (\"0\" + date.getHours()).slice(-2) + \":\" + (\"0\" + date.getMinutes()).slice(-2) + '에 수정됨';\n      const {\n        id,\n        name,\n        phone,\n        addr,\n        SNS,\n        position,\n        email,\n        time,\n        memo\n      } = action.payload;\n      const existingUser = state.find(user => user.id === id);\n\n      if (existingUser) {\n        existingUser.name = name;\n        existingUser.phone = phone;\n        existingUser.addr = addr;\n        existingUser.SNS = SNS;\n        existingUser.position = position;\n        existingUser.email = email;\n        existingUser.time = editDate;\n        existingUser.memo = memo;\n      }\n    },\n    deleteUser: (state, action) => {\n      const {\n        id\n      } = action.payload;\n      const existingUser = state.find(user => user.id === id);\n\n      if (existingUser) {\n        return state.filter(user => user.id !== id);\n      }\n    },\n    setPayment: (state, action) => {\n      const {\n        payment\n      } = action.payload;\n    }\n  }\n});\nexport const {\n  addUser,\n  editUser,\n  deleteUser,\n  setPayment\n} = userSlice.actions;\nexport default userSlice.reducer;","map":{"version":3,"sources":["C:/Users/wjdwp/S2_mms_S2/src/features/users/userSlice.js"],"names":["createSlice","initialState","userSlice","name","reducers","addUser","state","action","push","payload","editUser","date","Date","editDate","getFullYear","getMonth","getDate","getHours","slice","getMinutes","id","phone","addr","SNS","position","email","time","memo","existingUser","find","user","deleteUser","filter","setPayment","payment","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,YAAY,GAAG,EAArB;AAEA,MAAMC,SAAS,GAAGF,WAAW,CAAC;AAC5BG,EAAAA,IAAI,EAAE,OADsB;AAE5BF,EAAAA,YAF4B;AAG5BG,EAAAA,QAAQ,EAAE;AACRC,IAAAA,OAAO,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC1BD,MAAAA,KAAK,CAACE,IAAN,CAAWD,MAAM,CAACE,OAAlB;AACD,KAHO;AAIRC,IAAAA,QAAQ,EAAE,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AAC3B,YAAMI,IAAI,GAAG,IAAIC,IAAJ,EAAb;AACA,YAAMC,QAAQ,GACZF,IAAI,CAACG,WAAL,KACA,IADA,IAECH,IAAI,CAACI,QAAL,KAAkB,CAFnB,IAGA,GAHA,GAIAJ,IAAI,CAACK,OAAL,EAJA,GAKA,IALA,GAMA,CAAC,MAAML,IAAI,CAACM,QAAL,EAAP,EAAwBC,KAAxB,CAA8B,CAAC,CAA/B,CANA,GAOA,GAPA,GAQA,CAAC,MAAMP,IAAI,CAACQ,UAAL,EAAP,EAA0BD,KAA1B,CAAgC,CAAC,CAAjC,CARA,GAQoC,OATtC;AAUA,YAAM;AAAEE,QAAAA,EAAF;AAAMjB,QAAAA,IAAN;AAAYkB,QAAAA,KAAZ;AAAmBC,QAAAA,IAAnB;AAAyBC,QAAAA,GAAzB;AAA8BC,QAAAA,QAA9B;AAAuCC,QAAAA,KAAvC;AAA6CC,QAAAA,IAA7C;AAAmDC,QAAAA;AAAnD,UAA2DpB,MAAM,CAACE,OAAxE;AACA,YAAMmB,YAAY,GAAGtB,KAAK,CAACuB,IAAN,CAAWC,IAAI,IAAIA,IAAI,CAACV,EAAL,KAAYA,EAA/B,CAArB;;AACA,UAAGQ,YAAH,EAAiB;AACfA,QAAAA,YAAY,CAACzB,IAAb,GAAoBA,IAApB;AACAyB,QAAAA,YAAY,CAACP,KAAb,GAAqBA,KAArB;AACAO,QAAAA,YAAY,CAACN,IAAb,GAAoBA,IAApB;AACAM,QAAAA,YAAY,CAACL,GAAb,GAAmBA,GAAnB;AACAK,QAAAA,YAAY,CAACJ,QAAb,GAAwBA,QAAxB;AACAI,QAAAA,YAAY,CAACH,KAAb,GAAqBA,KAArB;AACAG,QAAAA,YAAY,CAACF,IAAb,GAAmBb,QAAnB;AACAe,QAAAA,YAAY,CAACD,IAAb,GAAoBA,IAApB;AACD;AACF,KA5BO;AA6BRI,IAAAA,UAAU,EAAE,CAACzB,KAAD,EAAQC,MAAR,KAAmB;AAC7B,YAAM;AAAEa,QAAAA;AAAF,UAASb,MAAM,CAACE,OAAtB;AACA,YAAMmB,YAAY,GAAGtB,KAAK,CAACuB,IAAN,CAAWC,IAAI,IAAIA,IAAI,CAACV,EAAL,KAAYA,EAA/B,CAArB;;AACA,UAAGQ,YAAH,EAAiB;AACf,eAAOtB,KAAK,CAAC0B,MAAN,CAAaF,IAAI,IAAIA,IAAI,CAACV,EAAL,KAAYA,EAAjC,CAAP;AACD;AACF,KAnCO;AAoCRa,IAAAA,UAAU,EAAE,CAAC3B,KAAD,EAAQC,MAAR,KAAmB;AAC7B,YAAM;AAAE2B,QAAAA;AAAF,UAAc3B,MAAM,CAACE,OAA3B;AAED;AAvCO;AAHkB,CAAD,CAA7B;AA8CA,OAAO,MAAM;AAAEJ,EAAAA,OAAF;AAAWK,EAAAA,QAAX;AAAqBqB,EAAAA,UAArB;AAAiCE,EAAAA;AAAjC,IAAgD/B,SAAS,CAACiC,OAAhE;AACP,eAAejC,SAAS,CAACkC,OAAzB","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = [];\r\n\r\nconst userSlice = createSlice({\r\n  name: 'users',\r\n  initialState,\r\n  reducers: {\r\n    addUser: (state, action) => {\r\n      state.push(action.payload);\r\n    },\r\n    editUser: (state, action) => {\r\n      const date = new Date();\r\n      const editDate =\r\n        date.getFullYear() +\r\n        \"년 \" +\r\n        (date.getMonth() + 1) +\r\n        \"월\" +\r\n        date.getDate() +\r\n        \"일 \" +\r\n        (\"0\" + date.getHours()).slice(-2) +\r\n        \":\" +\r\n        (\"0\" + date.getMinutes()).slice(-2)+'에 수정됨';\r\n      const { id, name, phone, addr, SNS, position,email,time ,memo} = action.payload;\r\n      const existingUser = state.find(user => user.id === id);\r\n      if(existingUser) {\r\n        existingUser.name = name;\r\n        existingUser.phone = phone;\r\n        existingUser.addr = addr;\r\n        existingUser.SNS = SNS;\r\n        existingUser.position = position;\r\n        existingUser.email = email;\r\n        existingUser.time= editDate;\r\n        existingUser.memo = memo;\r\n      }\r\n    },\r\n    deleteUser: (state, action) => {\r\n      const { id } = action.payload;\r\n      const existingUser = state.find(user => user.id === id);\r\n      if(existingUser) {\r\n        return state.filter(user => user.id !== id);\r\n      }\r\n    },\r\n    setPayment: (state, action) => {\r\n      const { payment } = action.payload;\r\n      \r\n    }\r\n  }\r\n});\r\n\r\nexport const { addUser, editUser, deleteUser, setPayment } = userSlice.actions;\r\nexport default userSlice.reducer;"]},"metadata":{},"sourceType":"module"}