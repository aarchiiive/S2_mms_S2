{"ast":null,"code":"'use strict';\n\nlet list = {\n  split(string, separators, last) {\n    let array = [];\n    let current = '';\n    let split = false;\n    let func = 0;\n    let inQuote = false;\n    let prevQuote = '';\n    let escape = false;\n    for (let letter of string) {\n      if (escape) {\n        escape = false;\n      } else if (letter === '\\\\') {\n        escape = true;\n      } else if (inQuote) {\n        if (letter === prevQuote) {\n          inQuote = false;\n        }\n      } else if (letter === '\"' || letter === \"'\") {\n        inQuote = true;\n        prevQuote = letter;\n      } else if (letter === '(') {\n        func += 1;\n      } else if (letter === ')') {\n        if (func > 0) func -= 1;\n      } else if (func === 0) {\n        if (separators.includes(letter)) split = true;\n      }\n      if (split) {\n        if (current !== '') array.push(current.trim());\n        current = '';\n        split = false;\n      } else {\n        current += letter;\n      }\n    }\n    if (last || current !== '') array.push(current.trim());\n    return array;\n  },\n  space(string) {\n    let spaces = [' ', '\\n', '\\t'];\n    return list.split(string, spaces);\n  },\n  comma(string) {\n    return list.split(string, [','], true);\n  }\n};\nmodule.exports = list;\nlist.default = list;","map":{"version":3,"names":["list","split","string","separators","last","array","current","func","inQuote","prevQuote","escape","letter","includes","push","trim","space","spaces","comma","module","exports","default"],"sources":["C:/Users/wjdwp/S2_mms_S2/node_modules/postcss/lib/list.js"],"sourcesContent":["'use strict'\r\n\r\nlet list = {\r\n  split(string, separators, last) {\r\n    let array = []\r\n    let current = ''\r\n    let split = false\r\n\r\n    let func = 0\r\n    let inQuote = false\r\n    let prevQuote = ''\r\n    let escape = false\r\n\r\n    for (let letter of string) {\r\n      if (escape) {\r\n        escape = false\r\n      } else if (letter === '\\\\') {\r\n        escape = true\r\n      } else if (inQuote) {\r\n        if (letter === prevQuote) {\r\n          inQuote = false\r\n        }\r\n      } else if (letter === '\"' || letter === \"'\") {\r\n        inQuote = true\r\n        prevQuote = letter\r\n      } else if (letter === '(') {\r\n        func += 1\r\n      } else if (letter === ')') {\r\n        if (func > 0) func -= 1\r\n      } else if (func === 0) {\r\n        if (separators.includes(letter)) split = true\r\n      }\r\n\r\n      if (split) {\r\n        if (current !== '') array.push(current.trim())\r\n        current = ''\r\n        split = false\r\n      } else {\r\n        current += letter\r\n      }\r\n    }\r\n\r\n    if (last || current !== '') array.push(current.trim())\r\n    return array\r\n  },\r\n\r\n  space(string) {\r\n    let spaces = [' ', '\\n', '\\t']\r\n    return list.split(string, spaces)\r\n  },\r\n\r\n  comma(string) {\r\n    return list.split(string, [','], true)\r\n  }\r\n}\r\n\r\nmodule.exports = list\r\nlist.default = list\r\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,IAAI,GAAG;EACTC,KAAK,CAACC,MAAM,EAAEC,UAAU,EAAEC,IAAI,EAAE;IAC9B,IAAIC,KAAK,GAAG,EAAE;IACd,IAAIC,OAAO,GAAG,EAAE;IAChB,IAAIL,KAAK,GAAG,KAAK;IAEjB,IAAIM,IAAI,GAAG,CAAC;IACZ,IAAIC,OAAO,GAAG,KAAK;IACnB,IAAIC,SAAS,GAAG,EAAE;IAClB,IAAIC,MAAM,GAAG,KAAK;IAElB,KAAK,IAAIC,MAAM,IAAIT,MAAM,EAAE;MACzB,IAAIQ,MAAM,EAAE;QACVA,MAAM,GAAG,KAAK;MAChB,CAAC,MAAM,IAAIC,MAAM,KAAK,IAAI,EAAE;QAC1BD,MAAM,GAAG,IAAI;MACf,CAAC,MAAM,IAAIF,OAAO,EAAE;QAClB,IAAIG,MAAM,KAAKF,SAAS,EAAE;UACxBD,OAAO,GAAG,KAAK;QACjB;MACF,CAAC,MAAM,IAAIG,MAAM,KAAK,GAAG,IAAIA,MAAM,KAAK,GAAG,EAAE;QAC3CH,OAAO,GAAG,IAAI;QACdC,SAAS,GAAGE,MAAM;MACpB,CAAC,MAAM,IAAIA,MAAM,KAAK,GAAG,EAAE;QACzBJ,IAAI,IAAI,CAAC;MACX,CAAC,MAAM,IAAII,MAAM,KAAK,GAAG,EAAE;QACzB,IAAIJ,IAAI,GAAG,CAAC,EAAEA,IAAI,IAAI,CAAC;MACzB,CAAC,MAAM,IAAIA,IAAI,KAAK,CAAC,EAAE;QACrB,IAAIJ,UAAU,CAACS,QAAQ,CAACD,MAAM,CAAC,EAAEV,KAAK,GAAG,IAAI;MAC/C;MAEA,IAAIA,KAAK,EAAE;QACT,IAAIK,OAAO,KAAK,EAAE,EAAED,KAAK,CAACQ,IAAI,CAACP,OAAO,CAACQ,IAAI,EAAE,CAAC;QAC9CR,OAAO,GAAG,EAAE;QACZL,KAAK,GAAG,KAAK;MACf,CAAC,MAAM;QACLK,OAAO,IAAIK,MAAM;MACnB;IACF;IAEA,IAAIP,IAAI,IAAIE,OAAO,KAAK,EAAE,EAAED,KAAK,CAACQ,IAAI,CAACP,OAAO,CAACQ,IAAI,EAAE,CAAC;IACtD,OAAOT,KAAK;EACd,CAAC;EAEDU,KAAK,CAACb,MAAM,EAAE;IACZ,IAAIc,MAAM,GAAG,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,CAAC;IAC9B,OAAOhB,IAAI,CAACC,KAAK,CAACC,MAAM,EAAEc,MAAM,CAAC;EACnC,CAAC;EAEDC,KAAK,CAACf,MAAM,EAAE;IACZ,OAAOF,IAAI,CAACC,KAAK,CAACC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC;EACxC;AACF,CAAC;AAEDgB,MAAM,CAACC,OAAO,GAAGnB,IAAI;AACrBA,IAAI,CAACoB,OAAO,GAAGpB,IAAI"},"metadata":{},"sourceType":"script","externalDependencies":[]}