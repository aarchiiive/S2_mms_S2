{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = [];\nconst userSlice = createSlice({\n  name: 'users',\n  initialState,\n  reducers: {\n    addUser: (state, action) => {\n      state.push(action.payload);\n    },\n    editUser: (state, action) => {\n      const date = new Date();\n      const editDate = date.getFullYear() + \"년 \" + (date.getMonth() + 1) + \"월\" + date.getDate() + \"일 \" + (\"0\" + date.getHours()).slice(-2) + \":\" + (\"0\" + date.getMinutes()).slice(-2) + '에 수정됨';\n      const {\n        id,\n        name,\n        phone,\n        addr,\n        SNS,\n        position,\n        email,\n        time,\n        memo\n      } = action.payload;\n      const existingUser = state.find(user => user.id === id);\n      if (existingUser) {\n        existingUser.name = name;\n        existingUser.phone = phone;\n        existingUser.addr = addr;\n        existingUser.SNS = SNS;\n        existingUser.position = position;\n        existingUser.email = email;\n        existingUser.time = editDate;\n        existingUser.memo = memo;\n      }\n    },\n    deleteUser: (state, action) => {\n      const {\n        id\n      } = action.payload;\n      const existingUser = state.find(user => user.id === id);\n      if (existingUser) {\n        return state.filter(user => user.id !== id);\n      }\n    },\n    addTemplate: (state, action) => {\n      const {\n        id,\n        template,\n        templateName\n      } = action.payload;\n      const existingUser = state.find(user => user.id === id);\n      console.log(existingUser);\n      if (existingUser) {\n        existingUser.template = template;\n        existingUser.templateName = templateName;\n      }\n    },\n    addPayment: (state, action) => {\n      const {\n        id,\n        payment\n      } = action.payload;\n      const existingUser = state.find(user => user.id === id);\n      console.log(existingUser);\n      if (existingUser) {\n        existingUser.payment = payment;\n      }\n    },\n    addPurchased: (state, action) => {\n      const {\n        id,\n        purchased\n      } = action.payload;\n      const existingUser = state.find(user => user.id === id);\n      console.log(existingUser);\n      if (existingUser) {\n        existingUser.purchased = purchased;\n      }\n    }\n  }\n});\nexport const {\n  addUser,\n  editUser,\n  deleteUser,\n  addTemplate,\n  addPayment\n} = userSlice.actions;\nexport default userSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","userSlice","name","reducers","addUser","state","action","push","payload","editUser","date","Date","editDate","getFullYear","getMonth","getDate","getHours","slice","getMinutes","id","phone","addr","SNS","position","email","time","memo","existingUser","find","user","deleteUser","filter","addTemplate","template","templateName","console","log","addPayment","payment","addPurchased","purchased","actions","reducer"],"sources":["/Users/archiiive/Desktop/S2_mms_S2/src/features/users/userSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = [];\n\nconst userSlice = createSlice({\n  name: 'users',\n  initialState,\n  reducers: {\n    addUser: (state, action) => {\n      state.push(action.payload);\n    },\n    editUser: (state, action) => {\n      const date = new Date();\n      const editDate =\n        date.getFullYear() +\n        \"년 \" +\n        (date.getMonth() + 1) +\n        \"월\" +\n        date.getDate() +\n        \"일 \" +\n        (\"0\" + date.getHours()).slice(-2) +\n        \":\" +\n        (\"0\" + date.getMinutes()).slice(-2)+'에 수정됨';\n      const { id, name, phone, addr, SNS, position,email,time ,memo} = action.payload;\n      const existingUser = state.find(user => user.id === id);\n      if(existingUser) {\n        existingUser.name = name;\n        existingUser.phone = phone;\n        existingUser.addr = addr;\n        existingUser.SNS = SNS;\n        existingUser.position = position;\n        existingUser.email = email;\n        existingUser.time= editDate;\n        existingUser.memo = memo;\n      }\n    },\n    deleteUser: (state, action) => {\n      const { id } = action.payload;\n      const existingUser = state.find(user => user.id === id);\n      if(existingUser) {\n        return state.filter(user => user.id !== id);\n      }\n    },\n    addTemplate: (state, action) => {\n      const { id, template, templateName } = action.payload;\n      const existingUser = state.find(user => user.id === id);\n      console.log(existingUser);\n      if (existingUser) {\n        existingUser.template = template;\n        existingUser.templateName = templateName;\n      }\n    },\n    addPayment: (state, action) => {\n      const { id, payment } = action.payload;\n      const existingUser = state.find(user => user.id === id);\n      console.log(existingUser);\n      if (existingUser) {\n        existingUser.payment = payment;\n      }\n    },\n    addPurchased: (state, action) => {\n      const { id, purchased } = action.payload;\n      const existingUser = state.find(user => user.id === id);\n      console.log(existingUser);\n      if (existingUser) {\n        existingUser.purchased = purchased;\n      }\n    }\n  }\n});\n\nexport const { addUser, editUser, deleteUser, addTemplate, addPayment } = userSlice.actions;\nexport default userSlice.reducer;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}